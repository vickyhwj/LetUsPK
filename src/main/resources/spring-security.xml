<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"  
	 xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/tx     
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/util  
    http://www.springframework.org/schema/util/spring-util.xsd 
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security-3.2.xsd">
	<http pattern="/login.jsp" security="none" />

	<http auto-config="true" use-expressions="true">
		<form-login login-page="/loginIndex1.html" default-target-url="/userIndex"
			always-use-default-target="true" />
		<!--增加一个filter，这点与 Acegi是不一样的，不能修改默认的filter了， 这个filter位于FILTER_SECURITY_INTERCEPTOR之前 -->
		<custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR" />
		<custom-filter ref="concurrentSessionFilter" position="CONCURRENT_SESSION_FILTER" />
		<logout logout-url="/outLogin" logout-success-url="/loginIndex1.html" />
	</http>

	
	<beans:bean id="myFilter"
		class="security.MyFilterSecurityInterceptor">
		<!-- 登录时赋予权限 -->
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<!-- 检查用户是否够权限访问资源 -->
		<beans:property name="accessDecisionManager" ref="myAccessDecisionManagerBean" />
		<!-- resourceMap key:url url:role -->
		<beans:property name="securityMetadataSource" ref="securityMetadataSource" />
	</beans:bean>

	<!--验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
	<authentication-manager alias="authenticationManager"
		erase-credentials="false">
		<authentication-provider user-service-ref="myUserDetailService">
			<!--如果用户的密码采用加密的话 <password-encoder hash="md5" /> -->
		</authentication-provider>
	</authentication-manager>
	<!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等 -->
	<beans:bean id="myUserDetailService"
		class="security.MyUserDetailService">
		
	</beans:bean>
	<!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<beans:bean id="myAccessDecisionManagerBean"
		class="security.MyAccessDecisionManager">
	</beans:bean>
	
	
	<!--资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->
	<beans:bean id="securityMetadataSource"
		class="security.MyInvocationSecurityMetadataSource" >
		<beans:constructor-arg>
			<beans:ref bean="securityDao"/>
		</beans:constructor-arg>
		
	</beans:bean>
<beans:bean id="sessionRegistry"
		class="org.springframework.security.core.session.SessionRegistryImpl" />

	<beans:bean id="concurrentSessionFilter"
		class="org.springframework.security.web.session.ConcurrentSessionFilter">
		<beans:property name="sessionRegistry" ref="sessionRegistry" />
		<beans:property name="expiredUrl" value="/loginIndex1.html" />
		<beans:property name="logoutHandlers">
			<beans:list>
				<beans:ref local="logoutHandler" />
			</beans:list>
		</beans:property>
	</beans:bean>

	<!-- 注销监听器 -->
	<beans:bean id="logoutHandler"
		class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler">
		<beans:property name="InvalidateHttpSession" value="true" />
	</beans:bean>


	<beans:bean id="userCache" class="security.RedisUserCache">
		
	</beans:bean>
	
	<global-method-security secured-annotations="enabled"  
    access-decision-manager-ref="myAccessDecisionManagerBean" />  

	

</beans:beans>