package com.websocket;

import javax.websocket.*;
import javax.websocket.server.ServerEndpoint;

import mapper.GameStateMapper;
import mapper.RelationshipMapper;
import mapper.UserMapper;
import net.sf.json.JSONObject;

import org.springframework.web.context.ContextLoader;

import com.google.gson.Gson;

import po.GameState;
import po.GameStateToString;
import po.User;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArraySet;


/**
 * @ServerEndpoint 注解是一个类层次的注解，它的功能主要是将目前的类定义成一个websocket服务器端,
 * 注解的值将被用于监听用户连接的终端访问URL地址,客户端可以通过这个URL来连接到WebSocket服务器端
 * @author uptop
 */
@ServerEndpoint("/websocket")
public class WebSocketTest {
	RelationshipMapper relationshipMapper=(RelationshipMapper) ContextLoader.getCurrentWebApplicationContext().getBean("relationshipMapper"); 
	UserMapper userMapper= (UserMapper) ContextLoader.getCurrentWebApplicationContext().getBean("userMapper");
	GameStateMapper gameStateMapper=(GameStateMapper) ContextLoader.getCurrentWebApplicationContext().getBean("gameStateMapper");
	
	String username,gameMapKey;
	public String getGameMapKey() {
		return gameMapKey;
	}

	public void setGameMapKey(String gameMapKey) {
		this.gameMapKey = gameMapKey;
	}


	//静态变量，用来记录当前在线连接数。应该把它设计成线程安全的。
    private static int onlineCount = 0;

    //concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。若要实现服务端与单一客户端通信的话，可以使用Map来存放，其中Key可以为用户标识
    public static HashMap<String,WebSocketTest> socketMap=new HashMap<String, WebSocketTest>();
    public static ConcurrentHashMap<String, GameState> gameMap=new ConcurrentHashMap<String, GameState>();
    
    //与某个客户端的连接会话，需要通过它来给客户端发送数据
    private Session session;

    public Session getSession() {
		return session;
	}

	public void setSession(Session session) {
		this.session = session;
	}

	/**
     * 连接建立成功调用的方法
     *
     * @param session 可选的参数。session为与某个客户端的连接会话，需要通过它来给客户端发送数据
     */
    @OnOpen
    public void onOpen(Session session) {
        this.session = session;
        Map<String,List<String>> map=session.getRequestParameterMap();
        List<String> list=map.get("username");
        this.username=list.get(0);
        
      
        
        socketMap.put(this.username, this);
        ArrayList<User> userList=(ArrayList<User>) relationshipMapper.selectUserListbyUserA(username);
        ArrayList<String> friendOnlineList=new ArrayList<String>();
        for(User user :userList){
        	if(socketMap.containsKey(user.getUserid())){
        		friendOnlineList.add(user.getUserid());
        	}
        }
        JSONObject result = new JSONObject();
		result.element("type", 2);
		result.element("list", friendOnlineList);
		System.out.print(result.toString());
        try {
			sendMessage(result.toString());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        JSONObject comResult = new JSONObject();
        comResult.element("type", 1);
        comResult.element("from", username);
        for(User user :userList){
        	if(socketMap.containsKey(user.getUserid())){
        		WebSocketTest socketTest=socketMap.get(user.getUserid());
        		socketTest.sendMsg(comResult.toString());
        	}
        }
        
    
       
        
        
        Integer gameStateId=gameStateMapper.selectGameStateIdFromUser(username);
        if(gameStateId!=null){
        	GameStateToString gameStateToString=gameStateMapper.selectGameStateById(gameStateId);
        	
        	JSONObject jsonObject=JSONObject.fromObject(gameStateToString.getGameStateJSON());
        	Gson gson=new Gson();
        	GameState gameState=gson.fromJson(gameStateToString.getGameStateJSON(), GameState.class);
        	
        	jsonObject.element("type", 8);
        	String A= jsonObject.getString("A");
        	String B=jsonObject.getString("B");
        	String key= A.compareTo(B)<0? A+" "+B:B+" "+A;
        	gameMapKey=key;
        	gameMap.put(key, gameState);
        	try{
        		WebSocketTest w1=socketMap.get(A);
        		w1.sendMessage(jsonObject.toString());
        	}catch(Exception e){
        		e.printStackTrace();
        	}
        	try{
        		WebSocketTest w1=socketMap.get(B);
        		w1.sendMessage(jsonObject.toString());
        	}catch(Exception e){
        		e.printStackTrace();
        	}
        	
        	
        }
        System.out.println("有新连接加入！当前在线人数为" + socketMap.size());
        System.out.println("有新连接加入！当前gameState" + gameMap.size());
       
    }

    /**
     * 连接关闭调用的方法
     */
    @OnClose
    public void onClose() {
    	 JSONObject comResult = new JSONObject();
         comResult.element("type", 3);
         comResult.element("from", username);
        ArrayList<User> userList=(ArrayList<User>) relationshipMapper.selectUserListbyUserA(username);
        for(User user:userList){
        	try{
        		WebSocketTest socketTest=socketMap.get(user.getUserid());
        		if(socketTest!=null&&socketTest.getSession().isOpen())
        			socketTest.sendMessage(comResult.toString());
        	}catch(Exception e){
        		e.printStackTrace();
        	}
        }
    	out();
        socketMap.remove(username);
        System.out.println("有一连接关闭！当前在线人数为" + socketMap.size());
        System.out.println("有新连接加入！当前gameState" + gameMap.size());
    }

    /**
     * 收到客户端消息后调用的方法
     *
     * @param message 客户端发送过来的消息
     * @param session 可选的参数
     */
    @OnMessage
    public void onMessage(String message, Session session) {
    	JSONObject jsonObject=JSONObject.fromObject(message);
    	int type=jsonObject.getInt("type");
    	
    	if(type==4){
    		String to=jsonObject.getString("to");
    		JSONObject comResult = new JSONObject();
            comResult.element("type", 5);
            comResult.element("from", username);
    		try{
    			WebSocketTest webSocketTest=socketMap.get(to);
    			webSocketTest.sendMessage(comResult.toString());
    		}catch(Exception e){
    			e.printStackTrace();
    		}
    	}
    	else if(type==7){
    		String to=jsonObject.getString("to");
    		JSONObject comResult = new JSONObject();
            comResult.element("type", 71);
            comResult.element("from", username);
            try{
    			WebSocketTest webSocketTest=socketMap.get(to);
    			webSocketTest.sendMessage(comResult.toString());
    			GameState gameState=new GameState();
    			char[][] state=gameState.getState();
    			for(int i=0;i<state.length;++i)
    				for(int j=0;j<state[i].length;++j){
    					state[i][j]='o';
    				}
    			gameState.setA(username);
    			gameState.setB(to);
    			gameState.setTurn(username);
    			
    			String key=username.compareTo(to)<0? username+" "+to:to+" "+username;
    			gameMapKey=key;
    			
    			gameMap.put(key, gameState);
    			WebSocketTest w1=socketMap.get(username),w2=socketMap.get(to);
    			w2.setGameMapKey(gameMapKey);
    			JSONObject gameObj=new JSONObject();
    			gameObj.element("state", gameState.getState());
    			gameObj.element("A", gameState.getA());
    			gameObj.element("B", gameState.getB());
    			gameObj.element("type", 8);
    			gameObj.element("turn", gameState.getTurn());
    			System.out.println(gameObj.toString());
    			w1.sendMessage(gameObj.toString());
    			w2.sendMessage(gameObj.toString());
    			
    		}catch(Exception e){
    			e.printStackTrace();
    		}
    	}
    	else if(type==6){
    		String to=jsonObject.getString("to");
    		JSONObject comResult = new JSONObject();
            comResult.element("type", 61);
            comResult.element("from", username);
            try{
    			WebSocketTest webSocketTest=socketMap.get(to);
    			webSocketTest.sendMessage(comResult.toString());
    		}catch(Exception e){
    			e.printStackTrace();
    		}
    	}
    	else if(type==9){
    		
    		
    		try{
    			String to=jsonObject.getString("to");
        		int x=jsonObject.getInt("x");
        		int y=jsonObject.getInt("y");
        		String key;
        		if(username.compareTo(to)<0) key=username+" "+to;
        		else key=to+" "+username;
        		
        		GameState gameState=gameMap.get(key);
        		gameState.changeTurn();
	    		WebSocketTest w1=socketMap.get(username),w2=socketMap.get(to);
				JSONObject gameObj=new JSONObject();
				if(gameState.play(username, x, y)==1){
					gameObj.element("winner", username);
					userMapper.updateWinAddOne(username);
					if(username.equals(gameState.getA()))
						userMapper.updateFaillAddOne(gameState.getB());
					else
						userMapper.updateFaillAddOne(gameState.getA());
				}
				gameObj.element("state", gameState.getState());
				gameObj.element("A", gameState.getA());
				gameObj.element("B", gameState.getB());
				gameObj.element("type", 8);
				gameObj.element("turn", gameState.getTurn());
				System.out.println(gameObj.toString());
				w1.sendMessage(gameObj.toString());
				w2.sendMessage(gameObj.toString());
    		}catch(Exception e){
    			e.printStackTrace();
    		}
    	}
    	else if(type==11){
    		
    		try {
    			String to=jsonObject.getString("to");
        		gameMap.remove(username+" "+to);
        		gameMap.remove(to+" "+username);
        		WebSocketTest socketTest=socketMap.get(to);
        		jsonObject.element("from", username);
        		System.out.print("buwan"+jsonObject.toString());
				socketTest.sendMessage(jsonObject.toString());
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    	}
    	
        System.out.println("来自客户端的消息:" + message);
    	System.out.println(Thread.currentThread().getName());

        //群发消息
      /*  for (WebSocketTest item : webSocketSet) {
            try {
                item.sendMessage(message);
            } catch (IOException e) {
                e.printStackTrace();
                continue;
            }
        }*/
    }

    /**
     * 发生错误时调用
     *
     * @param session
     * @param error
     */
    @OnError
    public void onError(Session session, Throwable error) {
        System.out.println("发生错误");
        out();
        error.printStackTrace();
    }
    public void out(){
    	if(gameMapKey==null) return; 
    	GameState gameState=gameMap.get(gameMapKey);
    	if(gameState==null) return;
    	synchronized (gameState) {
			
    		if(gameMap.get(gameMapKey)==null)return;
	    	if(gameState==null) return;
	    	JSONObject jsonObject=new JSONObject();
	    	jsonObject.element("A", gameState.getA());
	    	jsonObject.element("B", gameState.getB());
	    	jsonObject.element("state", gameState.getState());
	    	jsonObject.element("turn", gameState.getTurn());
	    	String x=jsonObject.toString();
	    	
	    	Integer gameStateId=gameStateMapper.selectGameStateIdFromUser(username);
	    	if(gameStateId==null){
		    	GameStateToString gameStateToString=new GameStateToString();
		    	gameStateToString.setGameStateJSON(x);
		    	
		    	gameStateMapper.insertGameState(gameStateToString);
		    	User user1=new User();
		    	user1.setUserid(username);
		    	user1.setLast(gameStateToString.getGameStateId());
		    	userMapper.updateUserByGameStateId(user1);
		    	User user2=new User();
		    	user2.setUserid(username.equals(gameState.getA())? gameState.getB():gameState.getA());
		    	user2.setLast(gameStateToString.getGameStateId());
		    	userMapper.updateUserByGameStateId(user2);
	    	}
	    	else{
	    		GameStateToString gameStateToString=new GameStateToString();
	    		gameStateToString.setGameStateId(gameStateId);
		    	gameStateToString.setGameStateJSON(x);
	    		gameStateMapper.updateGameState(gameStateToString);
	    	}
	    	
	    	
	    	gameMap.remove(gameMapKey);
	    	if(gameState.getA().equals(username)){
	    		try{
	    			boolean isOpen=socketMap.get(gameState.getB()).getSession().isOpen();
	    			if(isOpen) socketMap.get(gameState.getB()).getSession().close();
	    			socketMap.remove(gameState.getB());
	    		}catch(Exception e){
	    			e.printStackTrace();
	    		}
	    	}
	    	else{
	    		try{
	    			boolean isOpen=socketMap.get(gameState.getA()).getSession().isOpen();
	    			if(isOpen) socketMap.get(gameState.getA()).getSession().close();
	    			socketMap.remove(gameState.getA());
	    		}catch(Exception e){
	    			e.printStackTrace();
	    		}
	    	}
    	}
    	
    }
    /**
     * 这个方法与上面几个方法不一样。没有用注解，是根据自己需要添加的方法。
     *
     * @param message
     * @throws IOException
     */
    public void sendMessage(String message) throws IOException {
        this.session.getBasicRemote().sendText(message);

    }

    public static synchronized int getOnlineCount() {
        return onlineCount;
    }

    public static synchronized void addOnlineCount() {
        WebSocketTest.onlineCount++;
    }

    public static synchronized void subOnlineCount() {
        WebSocketTest.onlineCount--;
    }


    public void sendMsg(String msg) {
    	Set<Entry<String, WebSocketTest>> set=socketMap.entrySet();
        for (Entry<String, WebSocketTest> entry:set){
        	try {
				entry.getValue().sendMessage(msg);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        }
    }


}
